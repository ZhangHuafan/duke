package duke.util;

import duke.task.Task;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * This is a TaskList class that encapsulates all user's tasks.
 */
public class TaskList {

    private List<Task> tasks;

    public TaskList() {
        tasks = new ArrayList<>();
    }

    public TaskList(List<Task> tasks) {
        this.tasks = tasks;
    }

    public TaskList(Task... tasks) {
        this.tasks = new ArrayList<>(Arrays.asList(tasks));
    }

    public int getTotalTask() {
        return tasks.size();
    }

    public Task getTaskAt(int index) {
        return tasks.get(index);
    }

    public void add(Task newTask) {
        tasks.add(newTask);
    }

    public Task removeTaskAt(int index) {
        return tasks.remove(index);
    }

    /**
     * Indicates whether the newly added task is already in the list.
     *
     * @param task a <code>Task</code> that the user intends to add
     * @return <code>true</code> if this task list has a same task
     *         <code>false</code> otherwise.
     */
    public boolean contains(Task task) {
        for (Task t : tasks) {
            if (t.equals(task)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String toString() {
        String fullList = "";
        for (int i = 1; i <= getTotalTask(); i++) {
            fullList = fullList + i + ". " + this.getTaskAt(i - 1) + "\n";
        }
        return fullList;
    }


    //generated by Intellij with minor modification
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaskList another = (TaskList) o;
        return tasks.equals(another.tasks);
    }
}
